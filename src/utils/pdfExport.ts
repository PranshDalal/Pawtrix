import jsPDF from 'jspdf';
import { Pet, Analysis, PersonalityProfile } from '../types';

export const generatePetReport = (pet: Pet, analyses: Analysis[]): void => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  let yPosition = 20;

  // Title
  doc.setFontSize(24);
  doc.setTextColor(20, 184, 166); // mint color
  doc.text('Pawtrix Report', pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 15;

  // Pet Info
  doc.setFontSize(18);
  doc.setTextColor(0, 0, 0);
  doc.text(`${pet.name}'s Emotional Profile`, pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 10;

  doc.setFontSize(12);
  doc.setTextColor(100, 100, 100);
  doc.text(`Generated on ${new Date().toLocaleDateString()}`, pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 20;

  // Pet Details
  doc.setFontSize(14);
  doc.setTextColor(0, 0, 0);
  doc.text('Pet Information:', 20, yPosition);
  yPosition += 8;

  doc.setFontSize(11);
  doc.text(`Name: ${pet.name}`, 25, yPosition);
  yPosition += 6;
  doc.text(`Species: ${pet.species === 'dog' ? 'Dog' : 'Cat'}`, 25, yPosition);
  yPosition += 6;
  if (pet.breed) {
    doc.text(`Breed: ${pet.breed}`, 25, yPosition);
    yPosition += 6;
  }
  if (pet.age) {
    doc.text(`Age: ${pet.age} years old`, 25, yPosition);
    yPosition += 6;
  }
  yPosition += 10;

  // Personality Profile
  if (pet.personality) {
    doc.setFontSize(14);
    doc.text('Personality Profile:', 20, yPosition);
    yPosition += 8;

    doc.setFontSize(12);
    doc.text(`Type: ${pet.personality.type} ${pet.personality.icon}`, 25, yPosition);
    yPosition += 8;

    doc.setFontSize(10);
    const descriptionLines = doc.splitTextToSize(pet.personality.description, pageWidth - 50);
    doc.text(descriptionLines, 25, yPosition);
    yPosition += descriptionLines.length * 5 + 5;

    doc.text('Key Traits:', 25, yPosition);
    yPosition += 6;
    pet.personality.traits.forEach(trait => {
      doc.text(`• ${trait}`, 30, yPosition);
      yPosition += 5;
    });
    yPosition += 10;
  }

  // Mood Statistics
  if (analyses.length > 0) {
    doc.setFontSize(14);
    doc.text('Mood Analysis Summary:', 20, yPosition);
    yPosition += 8;

    doc.setFontSize(11);
    doc.text(`Total Analyses: ${analyses.length}`, 25, yPosition);
    yPosition += 6;

    // Calculate mood frequencies
    const moodCounts: Record<string, number> = {};
    analyses.forEach(analysis => {
      const mood = analysis.mood.primary;
      moodCounts[mood] = (moodCounts[mood] || 0) + 1;
    });

    const sortedMoods = Object.entries(moodCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);

    doc.text('Most Common Moods:', 25, yPosition);
    yPosition += 6;

    sortedMoods.forEach(([mood, count]) => {
      const percentage = Math.round((count / analyses.length) * 100);
      doc.text(`• ${mood}: ${count} times (${percentage}%)`, 30, yPosition);
      yPosition += 5;
    });
    yPosition += 10;

    // Recent Activity
    const recentAnalyses = analyses
      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())
      .slice(0, 5);

    doc.setFontSize(14);
    doc.text('Recent Activity:', 20, yPosition);
    yPosition += 8;

    recentAnalyses.forEach(analysis => {
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }

      doc.setFontSize(10);
      const date = new Date(analysis.timestamp).toLocaleDateString();
      doc.text(`${date} - ${analysis.mood.primary}`, 25, yPosition);
      yPosition += 5;

      const suggestionLines = doc.splitTextToSize(analysis.suggestion, pageWidth - 50);
      doc.setTextColor(100, 100, 100);
      doc.text(suggestionLines, 30, yPosition);
      doc.setTextColor(0, 0, 0);
      yPosition += suggestionLines.length * 4 + 5;
    });
  }

  // Footer
  doc.setFontSize(8);
  doc.setTextColor(150, 150, 150);
  doc.text('Generated by Pawtrix - Decode your pet\'s emotions', pageWidth / 2, 280, { align: 'center' });

  // Save the PDF
  doc.save(`${pet.name}-pawtrix-report.pdf`);
};